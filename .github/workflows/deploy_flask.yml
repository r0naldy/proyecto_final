name: Deploy Flask App to EC2

on:
  push:
    branches:
      - main 
    paths:
      - 'flask_app/**' 

env:
  AWS_REGION: us-east-1 
  S3_BUCKET_NAME: x-bucket-inicial

jobs:
  deploy:
    name: 'Deploy Flask App'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          EC2_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=FlaskAppInstance" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
        

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} 

      - name: Deploy to EC2
        run: |
          # Asegúrate de que el nombre de usuario es correcto para tu AMI (ej. ec2-user para Amazon Linux)
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << 'EOF'
            # Instalar o actualizar dependencias necesarias
            sudo yum update -y
            sudo yum install -y python3 python3-pip git nginx
            sudo pip3 install virtualenv

            # Crear directorio de la aplicación
            APP_DIR="/home/ec2-user/flask_app"
            if [ ! -d "$APP_DIR" ]; then
              mkdir -p "$APP_DIR"
            fi

            # Copiar archivos del repositorio
            rsync -avz --delete /home/runner/work/${{ github.repository }}/$(basename ${{ github.repository }})/flask_app/ $APP_DIR/

            # Configurar entorno virtual y Gunicorn
            cd "$APP_DIR"
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install -r requirements.txt
            deactivate

            # Configuración de Nginx
            sudo sh -c 'cat << EOL > /etc/nginx/conf.d/flask_app.conf
            server {
                listen 80;
                server_name _; # Puedes usar la IP pública o el nombre de dominio si tienes uno

                location / {
                    proxy_pass http://127.0.0.1:8000; # Puerto de Gunicorn
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL'

            # Configuración de Gunicorn como servicio systemd
            sudo sh -c 'cat << EOL > /etc/systemd/system/flask_app.service
            [Unit]
            Description=Gunicorn instance to serve flask_app
            After=network.target

            [Service]
            User=ec2-user
            Group=nginx # O el grupo de tu usuario, ej. ec2-user
            WorkingDirectory=/home/ec2-user/flask_app
            Environment="PATH=/home/ec2-user/flask_app/venv/bin"
            Environment="S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }}" # Pasar el nombre del bucket a la app Flask
            ExecStart=/home/ec2-user/flask_app/venv/bin/gunicorn --workers 3 --bind 0.0.0.0:8000 app:app
            Restart=always

            [Install]
            WantedBy=multi-user.target
            EOL'

            sudo systemctl daemon-reload
            sudo systemctl enable flask_app
            sudo systemctl start flask_app
            sudo systemctl restart nginx

            echo "Despliegue de Flask completado."
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}